// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /home/benchbot/cargo_target_dir/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_contracts
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 2_919 nanoseconds.
		Weight::from_ref_time(3_033_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 14_627 nanoseconds.
		Weight::from_ref_time(16_018_897 as u64)
			// Standard Error: 824
			.saturating_add(Weight::from_ref_time(893_332 as u64).saturating_mul(k as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(k as u64)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 2_867 nanoseconds.
		Weight::from_ref_time(13_411_793 as u64)
			// Standard Error: 5_268
			.saturating_add(Weight::from_ref_time(1_244_288 as u64).saturating_mul(q as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 20_987 nanoseconds.
		Weight::from_ref_time(24_245_898 as u64)
			// Standard Error: 48
			.saturating_add(Weight::from_ref_time(34_792 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 299_074 nanoseconds.
		Weight::from_ref_time(306_372_889 as u64)
			// Standard Error: 25
			.saturating_add(Weight::from_ref_time(30_663 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_072_174 nanoseconds.
		Weight::from_ref_time(337_874_723 as u64)
			// Standard Error: 73
			.saturating_add(Weight::from_ref_time(88_343 as u64).saturating_mul(c as u64))
			// Standard Error: 4
			.saturating_add(Weight::from_ref_time(1_695 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 178_787 nanoseconds.
		Weight::from_ref_time(171_072_954 as u64)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_447 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 147_880 nanoseconds.
		Weight::from_ref_time(149_054_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 281_951 nanoseconds.
		Weight::from_ref_time(296_591_045 as u64)
			// Standard Error: 59
			.saturating_add(Weight::from_ref_time(75_741 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 38_314 nanoseconds.
		Weight::from_ref_time(39_208_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 40_821 nanoseconds.
		Weight::from_ref_time(41_085_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 283_566 nanoseconds.
		Weight::from_ref_time(291_662_997 as u64)
			// Standard Error: 26_198
			.saturating_add(Weight::from_ref_time(15_812_705 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 283_050 nanoseconds.
		Weight::from_ref_time(231_589_172 as u64)
			// Standard Error: 457_107
			.saturating_add(Weight::from_ref_time(194_493_604 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 289_561 nanoseconds.
		Weight::from_ref_time(241_544_282 as u64)
			// Standard Error: 439_485
			.saturating_add(Weight::from_ref_time(234_068_306 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 284_800 nanoseconds.
		Weight::from_ref_time(292_300_021 as u64)
			// Standard Error: 40_833
			.saturating_add(Weight::from_ref_time(19_473_073 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 286_811 nanoseconds.
		Weight::from_ref_time(289_605_062 as u64)
			// Standard Error: 17_481
			.saturating_add(Weight::from_ref_time(11_088_146 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 284_389 nanoseconds.
		Weight::from_ref_time(291_607_958 as u64)
			// Standard Error: 33_895
			.saturating_add(Weight::from_ref_time(15_781_940 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 282_896 nanoseconds.
		Weight::from_ref_time(289_802_376 as u64)
			// Standard Error: 33_013
			.saturating_add(Weight::from_ref_time(15_705_525 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 284_380 nanoseconds.
		Weight::from_ref_time(291_136_750 as u64)
			// Standard Error: 92_026
			.saturating_add(Weight::from_ref_time(86_938_178 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 286_734 nanoseconds.
		Weight::from_ref_time(290_556_604 as u64)
			// Standard Error: 31_726
			.saturating_add(Weight::from_ref_time(15_580_656 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 282_935 nanoseconds.
		Weight::from_ref_time(290_693_236 as u64)
			// Standard Error: 24_862
			.saturating_add(Weight::from_ref_time(15_421_306 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 287_010 nanoseconds.
		Weight::from_ref_time(290_738_164 as u64)
			// Standard Error: 20_205
			.saturating_add(Weight::from_ref_time(15_237_554 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 286_862 nanoseconds.
		Weight::from_ref_time(291_029_188 as u64)
			// Standard Error: 30_491
			.saturating_add(Weight::from_ref_time(15_450_941 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 283_725 nanoseconds.
		Weight::from_ref_time(293_071_360 as u64)
			// Standard Error: 97_620
			.saturating_add(Weight::from_ref_time(85_454_560 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 135_545 nanoseconds.
		Weight::from_ref_time(139_022_047 as u64)
			// Standard Error: 9_547
			.saturating_add(Weight::from_ref_time(7_859_219 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 283_396 nanoseconds.
		Weight::from_ref_time(291_462_361 as u64)
			// Standard Error: 28_397
			.saturating_add(Weight::from_ref_time(13_492_690 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 302_871 nanoseconds.
		Weight::from_ref_time(320_897_273 as u64)
			// Standard Error: 3_496
			.saturating_add(Weight::from_ref_time(9_614_024 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 280_519 nanoseconds.
		Weight::from_ref_time(286_177_785 as u64)
			// Standard Error: 101_357
			.saturating_add(Weight::from_ref_time(888_714 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 285_901 nanoseconds.
		Weight::from_ref_time(287_315_127 as u64)
			// Standard Error: 877
			.saturating_add(Weight::from_ref_time(190_891 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 282_147 nanoseconds.
		Weight::from_ref_time(287_753_920 as u64)
			// Standard Error: 99_065
			.saturating_add(Weight::from_ref_time(53_786_379 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((5 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 282_779 nanoseconds.
		Weight::from_ref_time(295_701_851 as u64)
			// Standard Error: 92_851
			.saturating_add(Weight::from_ref_time(106_176_241 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 281_392 nanoseconds.
		Weight::from_ref_time(296_151_487 as u64)
			// Standard Error: 117_012
			.saturating_add(Weight::from_ref_time(222_546_893 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_192_807 nanoseconds.
		Weight::from_ref_time(506_881_525 as u64)
			// Standard Error: 443_155
			.saturating_add(Weight::from_ref_time(177_724_866 as u64).saturating_mul(t as u64))
			// Standard Error: 121_711
			.saturating_add(Weight::from_ref_time(67_213_725 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 148_269 nanoseconds.
		Weight::from_ref_time(152_128_988 as u64)
			// Standard Error: 16_981
			.saturating_add(Weight::from_ref_time(12_691_070 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 284_194 nanoseconds.
		Weight::from_ref_time(249_462_948 as u64)
			// Standard Error: 420_603
			.saturating_add(Weight::from_ref_time(382_005_385 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 416_372 nanoseconds.
		Weight::from_ref_time(558_600_043 as u64)
			// Standard Error: 1_283_845
			.saturating_add(Weight::from_ref_time(87_356_639 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(52 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(50 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 414_605 nanoseconds.
		Weight::from_ref_time(531_590_681 as u64)
			// Standard Error: 1_081_636
			.saturating_add(Weight::from_ref_time(61_988_451 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(49 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 284_561 nanoseconds.
		Weight::from_ref_time(247_133_699 as u64)
			// Standard Error: 430_882
			.saturating_add(Weight::from_ref_time(380_288_678 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 385_375 nanoseconds.
		Weight::from_ref_time(515_998_814 as u64)
			// Standard Error: 1_205_946
			.saturating_add(Weight::from_ref_time(63_741_054 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(48 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 284_047 nanoseconds.
		Weight::from_ref_time(258_952_780 as u64)
			// Standard Error: 359_810
			.saturating_add(Weight::from_ref_time(299_965_622 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 364_719 nanoseconds.
		Weight::from_ref_time(479_168_397 as u64)
			// Standard Error: 1_056_296
			.saturating_add(Weight::from_ref_time(148_008_433 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 285_860 nanoseconds.
		Weight::from_ref_time(260_444_355 as u64)
			// Standard Error: 354_017
			.saturating_add(Weight::from_ref_time(285_201_666 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 359_457 nanoseconds.
		Weight::from_ref_time(459_211_204 as u64)
			// Standard Error: 912_412
			.saturating_add(Weight::from_ref_time(56_532_346 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 285_064 nanoseconds.
		Weight::from_ref_time(246_043_797 as u64)
			// Standard Error: 442_983
			.saturating_add(Weight::from_ref_time(392_246_113 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 387_629 nanoseconds.
		Weight::from_ref_time(529_491_574 as u64)
			// Standard Error: 1_311_955
			.saturating_add(Weight::from_ref_time(155_160_167 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(48 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 287_827 nanoseconds.
		Weight::from_ref_time(226_727_998 as u64)
			// Standard Error: 758_553
			.saturating_add(Weight::from_ref_time(1_311_899_729 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 286_474 nanoseconds.
		Weight::from_ref_time(290_308_000 as u64)
			// Standard Error: 6_440_996
			.saturating_add(Weight::from_ref_time(20_239_024_486 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((160 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((160 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 288_054 nanoseconds.
		Weight::from_ref_time(290_468_000 as u64)
			// Standard Error: 6_594_354
			.saturating_add(Weight::from_ref_time(20_004_202_621 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((150 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((75 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_023_111 nanoseconds.
		Weight::from_ref_time(8_008_697_453 as u64)
			// Standard Error: 6_164_150
			.saturating_add(Weight::from_ref_time(1_242_557_423 as u64).saturating_mul(t as u64))
			// Standard Error: 9_242
			.saturating_add(Weight::from_ref_time(9_790_280 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(167 as u64))
			.saturating_add(T::DbWeight::get().reads((81 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(163 as u64))
			.saturating_add(T::DbWeight::get().writes((81 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 286_837 nanoseconds.
		Weight::from_ref_time(291_218_000 as u64)
			// Standard Error: 19_786_457
			.saturating_add(Weight::from_ref_time(25_510_029_458 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((400 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((400 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_068_335 nanoseconds.
		Weight::from_ref_time(10_796_296_013 as u64)
			// Standard Error: 76_863
			.saturating_add(Weight::from_ref_time(119_227_442 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(249 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(247 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 283_120 nanoseconds.
		Weight::from_ref_time(289_308_957 as u64)
			// Standard Error: 166_497
			.saturating_add(Weight::from_ref_time(41_451_242 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 329_812 nanoseconds.
		Weight::from_ref_time(330_612_000 as u64)
			// Standard Error: 53_026
			.saturating_add(Weight::from_ref_time(322_254_314 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 283_513 nanoseconds.
		Weight::from_ref_time(288_770_253 as u64)
			// Standard Error: 127_481
			.saturating_add(Weight::from_ref_time(54_024_646 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 337_526 nanoseconds.
		Weight::from_ref_time(341_798_000 as u64)
			// Standard Error: 55_732
			.saturating_add(Weight::from_ref_time(246_278_245 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 282_755 nanoseconds.
		Weight::from_ref_time(288_770_457 as u64)
			// Standard Error: 126_198
			.saturating_add(Weight::from_ref_time(31_005_842 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 318_456 nanoseconds.
		Weight::from_ref_time(319_657_000 as u64)
			// Standard Error: 48_627
			.saturating_add(Weight::from_ref_time(96_235_891 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 279_514 nanoseconds.
		Weight::from_ref_time(286_965_600 as u64)
			// Standard Error: 139_737
			.saturating_add(Weight::from_ref_time(31_455_000 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 314_440 nanoseconds.
		Weight::from_ref_time(317_795_000 as u64)
			// Standard Error: 50_822
			.saturating_add(Weight::from_ref_time(96_256_697 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 283_599 nanoseconds.
		Weight::from_ref_time(289_683_557 as u64)
			// Standard Error: 536_607
			.saturating_add(Weight::from_ref_time(3_008_499_142 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 283_690 nanoseconds.
		Weight::from_ref_time(289_027_440 as u64)
			// Standard Error: 371_475
			.saturating_add(Weight::from_ref_time(2_049_105_659 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 283_919 nanoseconds.
		Weight::from_ref_time(288_356_000 as u64)
			// Standard Error: 2_749_310
			.saturating_add(Weight::from_ref_time(1_358_240_619 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((225 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((150 as u64).saturating_mul(r as u64)))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 633 nanoseconds.
		Weight::from_ref_time(833_605 as u64)
			// Standard Error: 256
			.saturating_add(Weight::from_ref_time(493_683 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 772 nanoseconds.
		Weight::from_ref_time(1_216_335 as u64)
			// Standard Error: 506
			.saturating_add(Weight::from_ref_time(1_100_153 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 752 nanoseconds.
		Weight::from_ref_time(1_232_818 as u64)
			// Standard Error: 509
			.saturating_add(Weight::from_ref_time(1_006_310 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 636 nanoseconds.
		Weight::from_ref_time(908_576 as u64)
			// Standard Error: 223
			.saturating_add(Weight::from_ref_time(1_183_249 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 654 nanoseconds.
		Weight::from_ref_time(668_211 as u64)
			// Standard Error: 1_202
			.saturating_add(Weight::from_ref_time(1_518_771 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 660 nanoseconds.
		Weight::from_ref_time(859_213 as u64)
			// Standard Error: 243
			.saturating_add(Weight::from_ref_time(669_217 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 669 nanoseconds.
		Weight::from_ref_time(811_434 as u64)
			// Standard Error: 811
			.saturating_add(Weight::from_ref_time(932_974 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 670 nanoseconds.
		Weight::from_ref_time(510_094 as u64)
			// Standard Error: 1_793
			.saturating_add(Weight::from_ref_time(1_255_401 as u64).saturating_mul(r as u64))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_454 nanoseconds.
		Weight::from_ref_time(2_721_478 as u64)
			// Standard Error: 52
			.saturating_add(Weight::from_ref_time(3_520 as u64).saturating_mul(e as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 650 nanoseconds.
		Weight::from_ref_time(1_524_706 as u64)
			// Standard Error: 4_023
			.saturating_add(Weight::from_ref_time(2_429_512 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 711 nanoseconds.
		Weight::from_ref_time(1_576_545 as u64)
			// Standard Error: 2_825
			.saturating_add(Weight::from_ref_time(3_063_132 as u64).saturating_mul(r as u64))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_577 nanoseconds.
		Weight::from_ref_time(5_305_612 as u64)
			// Standard Error: 218
			.saturating_add(Weight::from_ref_time(207_324 as u64).saturating_mul(p as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_450 nanoseconds.
		Weight::from_ref_time(1_746_256 as u64)
			// Standard Error: 337
			.saturating_add(Weight::from_ref_time(609_345 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_457 nanoseconds.
		Weight::from_ref_time(1_699_261 as u64)
			// Standard Error: 212
			.saturating_add(Weight::from_ref_time(512_774 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_449 nanoseconds.
		Weight::from_ref_time(1_726_109 as u64)
			// Standard Error: 540
			.saturating_add(Weight::from_ref_time(722_939 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 707 nanoseconds.
		Weight::from_ref_time(1_012_945 as u64)
			// Standard Error: 456
			.saturating_add(Weight::from_ref_time(978_825 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 718 nanoseconds.
		Weight::from_ref_time(991_713 as u64)
			// Standard Error: 376
			.saturating_add(Weight::from_ref_time(958_921 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 737 nanoseconds.
		Weight::from_ref_time(1_003_536 as u64)
			// Standard Error: 357
			.saturating_add(Weight::from_ref_time(753_905 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(720_128 as u64)
			// Standard Error: 3_756
			.saturating_add(Weight::from_ref_time(188_693_871 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 650 nanoseconds.
		Weight::from_ref_time(892_350 as u64)
			// Standard Error: 221
			.saturating_add(Weight::from_ref_time(672_006 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 652 nanoseconds.
		Weight::from_ref_time(921_248 as u64)
			// Standard Error: 298
			.saturating_add(Weight::from_ref_time(671_631 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 645 nanoseconds.
		Weight::from_ref_time(890_444 as u64)
			// Standard Error: 247
			.saturating_add(Weight::from_ref_time(672_057 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 684 nanoseconds.
		Weight::from_ref_time(910_228 as u64)
			// Standard Error: 171
			.saturating_add(Weight::from_ref_time(684_713 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 668 nanoseconds.
		Weight::from_ref_time(874_456 as u64)
			// Standard Error: 171
			.saturating_add(Weight::from_ref_time(671_242 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 632 nanoseconds.
		Weight::from_ref_time(900_807 as u64)
			// Standard Error: 235
			.saturating_add(Weight::from_ref_time(670_298 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 647 nanoseconds.
		Weight::from_ref_time(910_984 as u64)
			// Standard Error: 327
			.saturating_add(Weight::from_ref_time(671_129 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 658 nanoseconds.
		Weight::from_ref_time(895_986 as u64)
			// Standard Error: 565
			.saturating_add(Weight::from_ref_time(913_649 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 671 nanoseconds.
		Weight::from_ref_time(892_539 as u64)
			// Standard Error: 202
			.saturating_add(Weight::from_ref_time(913_503 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 655 nanoseconds.
		Weight::from_ref_time(960_186 as u64)
			// Standard Error: 472
			.saturating_add(Weight::from_ref_time(922_417 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 635 nanoseconds.
		Weight::from_ref_time(870_482 as u64)
			// Standard Error: 274
			.saturating_add(Weight::from_ref_time(914_130 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 621 nanoseconds.
		Weight::from_ref_time(891_451 as u64)
			// Standard Error: 247
			.saturating_add(Weight::from_ref_time(909_133 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 662 nanoseconds.
		Weight::from_ref_time(904_400 as u64)
			// Standard Error: 194
			.saturating_add(Weight::from_ref_time(917_254 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 673 nanoseconds.
		Weight::from_ref_time(913_787 as u64)
			// Standard Error: 185
			.saturating_add(Weight::from_ref_time(911_025 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 646 nanoseconds.
		Weight::from_ref_time(892_985 as u64)
			// Standard Error: 175
			.saturating_add(Weight::from_ref_time(919_451 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 666 nanoseconds.
		Weight::from_ref_time(907_510 as u64)
			// Standard Error: 204
			.saturating_add(Weight::from_ref_time(911_125 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(896_012 as u64)
			// Standard Error: 262
			.saturating_add(Weight::from_ref_time(911_762 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(921_793 as u64)
			// Standard Error: 220
			.saturating_add(Weight::from_ref_time(900_803 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 676 nanoseconds.
		Weight::from_ref_time(908_870 as u64)
			// Standard Error: 277
			.saturating_add(Weight::from_ref_time(897_408 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 671 nanoseconds.
		Weight::from_ref_time(806_379 as u64)
			// Standard Error: 638
			.saturating_add(Weight::from_ref_time(911_294 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 639 nanoseconds.
		Weight::from_ref_time(679_032 as u64)
			// Standard Error: 6_536
			.saturating_add(Weight::from_ref_time(1_512_247 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(864_336 as u64)
			// Standard Error: 251
			.saturating_add(Weight::from_ref_time(1_361_436 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 650 nanoseconds.
		Weight::from_ref_time(969_193 as u64)
			// Standard Error: 333
			.saturating_add(Weight::from_ref_time(1_521_975 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 646 nanoseconds.
		Weight::from_ref_time(869_301 as u64)
			// Standard Error: 177
			.saturating_add(Weight::from_ref_time(1_361_528 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 626 nanoseconds.
		Weight::from_ref_time(883_738 as u64)
			// Standard Error: 288
			.saturating_add(Weight::from_ref_time(901_730 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 637 nanoseconds.
		Weight::from_ref_time(892_052 as u64)
			// Standard Error: 297
			.saturating_add(Weight::from_ref_time(901_479 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 617 nanoseconds.
		Weight::from_ref_time(882_714 as u64)
			// Standard Error: 207
			.saturating_add(Weight::from_ref_time(901_984 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(885_605 as u64)
			// Standard Error: 329
			.saturating_add(Weight::from_ref_time(911_644 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 655 nanoseconds.
		Weight::from_ref_time(916_923 as u64)
			// Standard Error: 219
			.saturating_add(Weight::from_ref_time(910_766 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 688 nanoseconds.
		Weight::from_ref_time(890_697 as u64)
			// Standard Error: 224
			.saturating_add(Weight::from_ref_time(910_605 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 679 nanoseconds.
		Weight::from_ref_time(964_104 as u64)
			// Standard Error: 658
			.saturating_add(Weight::from_ref_time(908_547 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 629 nanoseconds.
		Weight::from_ref_time(879_488 as u64)
			// Standard Error: 195
			.saturating_add(Weight::from_ref_time(910_911 as u64).saturating_mul(r as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 2_919 nanoseconds.
		Weight::from_ref_time(3_033_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 14_627 nanoseconds.
		Weight::from_ref_time(16_018_897 as u64)
			// Standard Error: 824
			.saturating_add(Weight::from_ref_time(893_332 as u64).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(k as u64)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 2_867 nanoseconds.
		Weight::from_ref_time(13_411_793 as u64)
			// Standard Error: 5_268
			.saturating_add(Weight::from_ref_time(1_244_288 as u64).saturating_mul(q as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 20_987 nanoseconds.
		Weight::from_ref_time(24_245_898 as u64)
			// Standard Error: 48
			.saturating_add(Weight::from_ref_time(34_792 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 299_074 nanoseconds.
		Weight::from_ref_time(306_372_889 as u64)
			// Standard Error: 25
			.saturating_add(Weight::from_ref_time(30_663 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_072_174 nanoseconds.
		Weight::from_ref_time(337_874_723 as u64)
			// Standard Error: 73
			.saturating_add(Weight::from_ref_time(88_343 as u64).saturating_mul(c as u64))
			// Standard Error: 4
			.saturating_add(Weight::from_ref_time(1_695 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 178_787 nanoseconds.
		Weight::from_ref_time(171_072_954 as u64)
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(1_447 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 147_880 nanoseconds.
		Weight::from_ref_time(149_054_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 281_951 nanoseconds.
		Weight::from_ref_time(296_591_045 as u64)
			// Standard Error: 59
			.saturating_add(Weight::from_ref_time(75_741 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 38_314 nanoseconds.
		Weight::from_ref_time(39_208_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 40_821 nanoseconds.
		Weight::from_ref_time(41_085_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 283_566 nanoseconds.
		Weight::from_ref_time(291_662_997 as u64)
			// Standard Error: 26_198
			.saturating_add(Weight::from_ref_time(15_812_705 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 283_050 nanoseconds.
		Weight::from_ref_time(231_589_172 as u64)
			// Standard Error: 457_107
			.saturating_add(Weight::from_ref_time(194_493_604 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 289_561 nanoseconds.
		Weight::from_ref_time(241_544_282 as u64)
			// Standard Error: 439_485
			.saturating_add(Weight::from_ref_time(234_068_306 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 284_800 nanoseconds.
		Weight::from_ref_time(292_300_021 as u64)
			// Standard Error: 40_833
			.saturating_add(Weight::from_ref_time(19_473_073 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 286_811 nanoseconds.
		Weight::from_ref_time(289_605_062 as u64)
			// Standard Error: 17_481
			.saturating_add(Weight::from_ref_time(11_088_146 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 284_389 nanoseconds.
		Weight::from_ref_time(291_607_958 as u64)
			// Standard Error: 33_895
			.saturating_add(Weight::from_ref_time(15_781_940 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 282_896 nanoseconds.
		Weight::from_ref_time(289_802_376 as u64)
			// Standard Error: 33_013
			.saturating_add(Weight::from_ref_time(15_705_525 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 284_380 nanoseconds.
		Weight::from_ref_time(291_136_750 as u64)
			// Standard Error: 92_026
			.saturating_add(Weight::from_ref_time(86_938_178 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 286_734 nanoseconds.
		Weight::from_ref_time(290_556_604 as u64)
			// Standard Error: 31_726
			.saturating_add(Weight::from_ref_time(15_580_656 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 282_935 nanoseconds.
		Weight::from_ref_time(290_693_236 as u64)
			// Standard Error: 24_862
			.saturating_add(Weight::from_ref_time(15_421_306 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 287_010 nanoseconds.
		Weight::from_ref_time(290_738_164 as u64)
			// Standard Error: 20_205
			.saturating_add(Weight::from_ref_time(15_237_554 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 286_862 nanoseconds.
		Weight::from_ref_time(291_029_188 as u64)
			// Standard Error: 30_491
			.saturating_add(Weight::from_ref_time(15_450_941 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 283_725 nanoseconds.
		Weight::from_ref_time(293_071_360 as u64)
			// Standard Error: 97_620
			.saturating_add(Weight::from_ref_time(85_454_560 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 135_545 nanoseconds.
		Weight::from_ref_time(139_022_047 as u64)
			// Standard Error: 9_547
			.saturating_add(Weight::from_ref_time(7_859_219 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 283_396 nanoseconds.
		Weight::from_ref_time(291_462_361 as u64)
			// Standard Error: 28_397
			.saturating_add(Weight::from_ref_time(13_492_690 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 302_871 nanoseconds.
		Weight::from_ref_time(320_897_273 as u64)
			// Standard Error: 3_496
			.saturating_add(Weight::from_ref_time(9_614_024 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 280_519 nanoseconds.
		Weight::from_ref_time(286_177_785 as u64)
			// Standard Error: 101_357
			.saturating_add(Weight::from_ref_time(888_714 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 285_901 nanoseconds.
		Weight::from_ref_time(287_315_127 as u64)
			// Standard Error: 877
			.saturating_add(Weight::from_ref_time(190_891 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 282_147 nanoseconds.
		Weight::from_ref_time(287_753_920 as u64)
			// Standard Error: 99_065
			.saturating_add(Weight::from_ref_time(53_786_379 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((5 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((6 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 282_779 nanoseconds.
		Weight::from_ref_time(295_701_851 as u64)
			// Standard Error: 92_851
			.saturating_add(Weight::from_ref_time(106_176_241 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 281_392 nanoseconds.
		Weight::from_ref_time(296_151_487 as u64)
			// Standard Error: 117_012
			.saturating_add(Weight::from_ref_time(222_546_893 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_192_807 nanoseconds.
		Weight::from_ref_time(506_881_525 as u64)
			// Standard Error: 443_155
			.saturating_add(Weight::from_ref_time(177_724_866 as u64).saturating_mul(t as u64))
			// Standard Error: 121_711
			.saturating_add(Weight::from_ref_time(67_213_725 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 148_269 nanoseconds.
		Weight::from_ref_time(152_128_988 as u64)
			// Standard Error: 16_981
			.saturating_add(Weight::from_ref_time(12_691_070 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 284_194 nanoseconds.
		Weight::from_ref_time(249_462_948 as u64)
			// Standard Error: 420_603
			.saturating_add(Weight::from_ref_time(382_005_385 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 416_372 nanoseconds.
		Weight::from_ref_time(558_600_043 as u64)
			// Standard Error: 1_283_845
			.saturating_add(Weight::from_ref_time(87_356_639 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(52 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(50 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 414_605 nanoseconds.
		Weight::from_ref_time(531_590_681 as u64)
			// Standard Error: 1_081_636
			.saturating_add(Weight::from_ref_time(61_988_451 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(49 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 284_561 nanoseconds.
		Weight::from_ref_time(247_133_699 as u64)
			// Standard Error: 430_882
			.saturating_add(Weight::from_ref_time(380_288_678 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 385_375 nanoseconds.
		Weight::from_ref_time(515_998_814 as u64)
			// Standard Error: 1_205_946
			.saturating_add(Weight::from_ref_time(63_741_054 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(48 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 284_047 nanoseconds.
		Weight::from_ref_time(258_952_780 as u64)
			// Standard Error: 359_810
			.saturating_add(Weight::from_ref_time(299_965_622 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 364_719 nanoseconds.
		Weight::from_ref_time(479_168_397 as u64)
			// Standard Error: 1_056_296
			.saturating_add(Weight::from_ref_time(148_008_433 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 285_860 nanoseconds.
		Weight::from_ref_time(260_444_355 as u64)
			// Standard Error: 354_017
			.saturating_add(Weight::from_ref_time(285_201_666 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 359_457 nanoseconds.
		Weight::from_ref_time(459_211_204 as u64)
			// Standard Error: 912_412
			.saturating_add(Weight::from_ref_time(56_532_346 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 285_064 nanoseconds.
		Weight::from_ref_time(246_043_797 as u64)
			// Standard Error: 442_983
			.saturating_add(Weight::from_ref_time(392_246_113 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 387_629 nanoseconds.
		Weight::from_ref_time(529_491_574 as u64)
			// Standard Error: 1_311_955
			.saturating_add(Weight::from_ref_time(155_160_167 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(48 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 287_827 nanoseconds.
		Weight::from_ref_time(226_727_998 as u64)
			// Standard Error: 758_553
			.saturating_add(Weight::from_ref_time(1_311_899_729 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 286_474 nanoseconds.
		Weight::from_ref_time(290_308_000 as u64)
			// Standard Error: 6_440_996
			.saturating_add(Weight::from_ref_time(20_239_024_486 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().reads((160 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((160 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 288_054 nanoseconds.
		Weight::from_ref_time(290_468_000 as u64)
			// Standard Error: 6_594_354
			.saturating_add(Weight::from_ref_time(20_004_202_621 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((150 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((75 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_023_111 nanoseconds.
		Weight::from_ref_time(8_008_697_453 as u64)
			// Standard Error: 6_164_150
			.saturating_add(Weight::from_ref_time(1_242_557_423 as u64).saturating_mul(t as u64))
			// Standard Error: 9_242
			.saturating_add(Weight::from_ref_time(9_790_280 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(167 as u64))
			.saturating_add(RocksDbWeight::get().reads((81 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(163 as u64))
			.saturating_add(RocksDbWeight::get().writes((81 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 286_837 nanoseconds.
		Weight::from_ref_time(291_218_000 as u64)
			// Standard Error: 19_786_457
			.saturating_add(Weight::from_ref_time(25_510_029_458 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().reads((400 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
			.saturating_add(RocksDbWeight::get().writes((400 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_068_335 nanoseconds.
		Weight::from_ref_time(10_796_296_013 as u64)
			// Standard Error: 76_863
			.saturating_add(Weight::from_ref_time(119_227_442 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(249 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(247 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 283_120 nanoseconds.
		Weight::from_ref_time(289_308_957 as u64)
			// Standard Error: 166_497
			.saturating_add(Weight::from_ref_time(41_451_242 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 329_812 nanoseconds.
		Weight::from_ref_time(330_612_000 as u64)
			// Standard Error: 53_026
			.saturating_add(Weight::from_ref_time(322_254_314 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 283_513 nanoseconds.
		Weight::from_ref_time(288_770_253 as u64)
			// Standard Error: 127_481
			.saturating_add(Weight::from_ref_time(54_024_646 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 337_526 nanoseconds.
		Weight::from_ref_time(341_798_000 as u64)
			// Standard Error: 55_732
			.saturating_add(Weight::from_ref_time(246_278_245 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 282_755 nanoseconds.
		Weight::from_ref_time(288_770_457 as u64)
			// Standard Error: 126_198
			.saturating_add(Weight::from_ref_time(31_005_842 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 318_456 nanoseconds.
		Weight::from_ref_time(319_657_000 as u64)
			// Standard Error: 48_627
			.saturating_add(Weight::from_ref_time(96_235_891 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 279_514 nanoseconds.
		Weight::from_ref_time(286_965_600 as u64)
			// Standard Error: 139_737
			.saturating_add(Weight::from_ref_time(31_455_000 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 314_440 nanoseconds.
		Weight::from_ref_time(317_795_000 as u64)
			// Standard Error: 50_822
			.saturating_add(Weight::from_ref_time(96_256_697 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 283_599 nanoseconds.
		Weight::from_ref_time(289_683_557 as u64)
			// Standard Error: 536_607
			.saturating_add(Weight::from_ref_time(3_008_499_142 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 283_690 nanoseconds.
		Weight::from_ref_time(289_027_440 as u64)
			// Standard Error: 371_475
			.saturating_add(Weight::from_ref_time(2_049_105_659 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 283_919 nanoseconds.
		Weight::from_ref_time(288_356_000 as u64)
			// Standard Error: 2_749_310
			.saturating_add(Weight::from_ref_time(1_358_240_619 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((225 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((150 as u64).saturating_mul(r as u64)))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 633 nanoseconds.
		Weight::from_ref_time(833_605 as u64)
			// Standard Error: 256
			.saturating_add(Weight::from_ref_time(493_683 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 772 nanoseconds.
		Weight::from_ref_time(1_216_335 as u64)
			// Standard Error: 506
			.saturating_add(Weight::from_ref_time(1_100_153 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 752 nanoseconds.
		Weight::from_ref_time(1_232_818 as u64)
			// Standard Error: 509
			.saturating_add(Weight::from_ref_time(1_006_310 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 636 nanoseconds.
		Weight::from_ref_time(908_576 as u64)
			// Standard Error: 223
			.saturating_add(Weight::from_ref_time(1_183_249 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 654 nanoseconds.
		Weight::from_ref_time(668_211 as u64)
			// Standard Error: 1_202
			.saturating_add(Weight::from_ref_time(1_518_771 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 660 nanoseconds.
		Weight::from_ref_time(859_213 as u64)
			// Standard Error: 243
			.saturating_add(Weight::from_ref_time(669_217 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 669 nanoseconds.
		Weight::from_ref_time(811_434 as u64)
			// Standard Error: 811
			.saturating_add(Weight::from_ref_time(932_974 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 670 nanoseconds.
		Weight::from_ref_time(510_094 as u64)
			// Standard Error: 1_793
			.saturating_add(Weight::from_ref_time(1_255_401 as u64).saturating_mul(r as u64))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_454 nanoseconds.
		Weight::from_ref_time(2_721_478 as u64)
			// Standard Error: 52
			.saturating_add(Weight::from_ref_time(3_520 as u64).saturating_mul(e as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 650 nanoseconds.
		Weight::from_ref_time(1_524_706 as u64)
			// Standard Error: 4_023
			.saturating_add(Weight::from_ref_time(2_429_512 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 711 nanoseconds.
		Weight::from_ref_time(1_576_545 as u64)
			// Standard Error: 2_825
			.saturating_add(Weight::from_ref_time(3_063_132 as u64).saturating_mul(r as u64))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_577 nanoseconds.
		Weight::from_ref_time(5_305_612 as u64)
			// Standard Error: 218
			.saturating_add(Weight::from_ref_time(207_324 as u64).saturating_mul(p as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_450 nanoseconds.
		Weight::from_ref_time(1_746_256 as u64)
			// Standard Error: 337
			.saturating_add(Weight::from_ref_time(609_345 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_457 nanoseconds.
		Weight::from_ref_time(1_699_261 as u64)
			// Standard Error: 212
			.saturating_add(Weight::from_ref_time(512_774 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_449 nanoseconds.
		Weight::from_ref_time(1_726_109 as u64)
			// Standard Error: 540
			.saturating_add(Weight::from_ref_time(722_939 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 707 nanoseconds.
		Weight::from_ref_time(1_012_945 as u64)
			// Standard Error: 456
			.saturating_add(Weight::from_ref_time(978_825 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 718 nanoseconds.
		Weight::from_ref_time(991_713 as u64)
			// Standard Error: 376
			.saturating_add(Weight::from_ref_time(958_921 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 737 nanoseconds.
		Weight::from_ref_time(1_003_536 as u64)
			// Standard Error: 357
			.saturating_add(Weight::from_ref_time(753_905 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(720_128 as u64)
			// Standard Error: 3_756
			.saturating_add(Weight::from_ref_time(188_693_871 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 650 nanoseconds.
		Weight::from_ref_time(892_350 as u64)
			// Standard Error: 221
			.saturating_add(Weight::from_ref_time(672_006 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 652 nanoseconds.
		Weight::from_ref_time(921_248 as u64)
			// Standard Error: 298
			.saturating_add(Weight::from_ref_time(671_631 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 645 nanoseconds.
		Weight::from_ref_time(890_444 as u64)
			// Standard Error: 247
			.saturating_add(Weight::from_ref_time(672_057 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 684 nanoseconds.
		Weight::from_ref_time(910_228 as u64)
			// Standard Error: 171
			.saturating_add(Weight::from_ref_time(684_713 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 668 nanoseconds.
		Weight::from_ref_time(874_456 as u64)
			// Standard Error: 171
			.saturating_add(Weight::from_ref_time(671_242 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 632 nanoseconds.
		Weight::from_ref_time(900_807 as u64)
			// Standard Error: 235
			.saturating_add(Weight::from_ref_time(670_298 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 647 nanoseconds.
		Weight::from_ref_time(910_984 as u64)
			// Standard Error: 327
			.saturating_add(Weight::from_ref_time(671_129 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 658 nanoseconds.
		Weight::from_ref_time(895_986 as u64)
			// Standard Error: 565
			.saturating_add(Weight::from_ref_time(913_649 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 671 nanoseconds.
		Weight::from_ref_time(892_539 as u64)
			// Standard Error: 202
			.saturating_add(Weight::from_ref_time(913_503 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 655 nanoseconds.
		Weight::from_ref_time(960_186 as u64)
			// Standard Error: 472
			.saturating_add(Weight::from_ref_time(922_417 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 635 nanoseconds.
		Weight::from_ref_time(870_482 as u64)
			// Standard Error: 274
			.saturating_add(Weight::from_ref_time(914_130 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 621 nanoseconds.
		Weight::from_ref_time(891_451 as u64)
			// Standard Error: 247
			.saturating_add(Weight::from_ref_time(909_133 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 662 nanoseconds.
		Weight::from_ref_time(904_400 as u64)
			// Standard Error: 194
			.saturating_add(Weight::from_ref_time(917_254 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 673 nanoseconds.
		Weight::from_ref_time(913_787 as u64)
			// Standard Error: 185
			.saturating_add(Weight::from_ref_time(911_025 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 646 nanoseconds.
		Weight::from_ref_time(892_985 as u64)
			// Standard Error: 175
			.saturating_add(Weight::from_ref_time(919_451 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 666 nanoseconds.
		Weight::from_ref_time(907_510 as u64)
			// Standard Error: 204
			.saturating_add(Weight::from_ref_time(911_125 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(896_012 as u64)
			// Standard Error: 262
			.saturating_add(Weight::from_ref_time(911_762 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(921_793 as u64)
			// Standard Error: 220
			.saturating_add(Weight::from_ref_time(900_803 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 676 nanoseconds.
		Weight::from_ref_time(908_870 as u64)
			// Standard Error: 277
			.saturating_add(Weight::from_ref_time(897_408 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 671 nanoseconds.
		Weight::from_ref_time(806_379 as u64)
			// Standard Error: 638
			.saturating_add(Weight::from_ref_time(911_294 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 639 nanoseconds.
		Weight::from_ref_time(679_032 as u64)
			// Standard Error: 6_536
			.saturating_add(Weight::from_ref_time(1_512_247 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(864_336 as u64)
			// Standard Error: 251
			.saturating_add(Weight::from_ref_time(1_361_436 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 650 nanoseconds.
		Weight::from_ref_time(969_193 as u64)
			// Standard Error: 333
			.saturating_add(Weight::from_ref_time(1_521_975 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 646 nanoseconds.
		Weight::from_ref_time(869_301 as u64)
			// Standard Error: 177
			.saturating_add(Weight::from_ref_time(1_361_528 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 626 nanoseconds.
		Weight::from_ref_time(883_738 as u64)
			// Standard Error: 288
			.saturating_add(Weight::from_ref_time(901_730 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 637 nanoseconds.
		Weight::from_ref_time(892_052 as u64)
			// Standard Error: 297
			.saturating_add(Weight::from_ref_time(901_479 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 617 nanoseconds.
		Weight::from_ref_time(882_714 as u64)
			// Standard Error: 207
			.saturating_add(Weight::from_ref_time(901_984 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(885_605 as u64)
			// Standard Error: 329
			.saturating_add(Weight::from_ref_time(911_644 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 655 nanoseconds.
		Weight::from_ref_time(916_923 as u64)
			// Standard Error: 219
			.saturating_add(Weight::from_ref_time(910_766 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 688 nanoseconds.
		Weight::from_ref_time(890_697 as u64)
			// Standard Error: 224
			.saturating_add(Weight::from_ref_time(910_605 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 679 nanoseconds.
		Weight::from_ref_time(964_104 as u64)
			// Standard Error: 658
			.saturating_add(Weight::from_ref_time(908_547 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 629 nanoseconds.
		Weight::from_ref_time(879_488 as u64)
			// Standard Error: 195
			.saturating_add(Weight::from_ref_time(910_911 as u64).saturating_mul(r as u64))
	}
}
