// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_alliance
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm2`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_alliance
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/alliance/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_alliance.
pub trait WeightInfo {
	fn propose_proposed(b: u32, x: u32, y: u32, p: u32, ) -> Weight;
	fn vote(x: u32, y: u32, ) -> Weight;
	fn veto(p: u32, ) -> Weight;
	fn close_early_disapproved(x: u32, y: u32, p: u32, ) -> Weight;
	fn close_early_approved(b: u32, x: u32, y: u32, p: u32, ) -> Weight;
	fn close_disapproved(x: u32, y: u32, p: u32, ) -> Weight;
	fn close_approved(b: u32, x: u32, y: u32, p: u32, ) -> Weight;
	fn init_members(x: u32, y: u32, z: u32, ) -> Weight;
	fn disband(x: u32, y: u32, z: u32, ) -> Weight;
	fn set_rule() -> Weight;
	fn announce() -> Weight;
	fn remove_announcement() -> Weight;
	fn join_alliance() -> Weight;
	fn nominate_ally() -> Weight;
	fn elevate_ally() -> Weight;
	fn give_retirement_notice() -> Weight;
	fn retire() -> Weight;
	fn kick_member() -> Weight;
	fn add_unscrupulous_items(n: u32, l: u32, ) -> Weight;
	fn remove_unscrupulous_items(n: u32, l: u32, ) -> Weight;
}

/// Weights for pallet_alliance using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion ProposalOf (r:1 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalCount (r:1 w:1)
	// Storage: AllianceMotion Voting (r:0 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[0, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, _x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 42_010 nanoseconds.
		Weight::from_ref_time(38_648_480 as u64)
			// Standard Error: 160
			.saturating_add(Weight::from_ref_time(629 as u64).saturating_mul(b as u64))
			// Standard Error: 1_814
			.saturating_add(Weight::from_ref_time(68_458 as u64).saturating_mul(y as u64))
			// Standard Error: 1_656
			.saturating_add(Weight::from_ref_time(205_685 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:2 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	/// The range of component `x` is `[3, 10]`.
	/// The range of component `y` is `[2, 90]`.
	fn vote(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 45_759 nanoseconds.
		Weight::from_ref_time(47_395_925 as u64)
			// Standard Error: 28_585
			.saturating_add(Weight::from_ref_time(115_114 as u64).saturating_mul(x as u64))
			// Standard Error: 2_419
			.saturating_add(Weight::from_ref_time(124_366 as u64).saturating_mul(y as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion ProposalOf (r:1 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion Voting (r:0 w:1)
	/// The range of component `p` is `[1, 100]`.
	fn veto(p: u32, ) -> Weight {
		// Minimum execution time: 32_932 nanoseconds.
		Weight::from_ref_time(36_575_953 as u64)
			// Standard Error: 1_694
			.saturating_add(Weight::from_ref_time(171_044 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 49_557 nanoseconds.
		Weight::from_ref_time(39_153_825 as u64)
			// Standard Error: 17_921
			.saturating_add(Weight::from_ref_time(231_354 as u64).saturating_mul(x as u64))
			// Standard Error: 1_746
			.saturating_add(Weight::from_ref_time(102_638 as u64).saturating_mul(y as u64))
			// Standard Error: 1_559
			.saturating_add(Weight::from_ref_time(186_229 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion ProposalOf (r:1 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 59_692 nanoseconds.
		Weight::from_ref_time(50_050_088 as u64)
			// Standard Error: 134
			.saturating_add(Weight::from_ref_time(1_827 as u64).saturating_mul(b as u64))
			// Standard Error: 15_862
			.saturating_add(Weight::from_ref_time(37_921 as u64).saturating_mul(x as u64))
			// Standard Error: 1_548
			.saturating_add(Weight::from_ref_time(94_269 as u64).saturating_mul(y as u64))
			// Standard Error: 1_382
			.saturating_add(Weight::from_ref_time(212_481 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion Prime (r:1 w:0)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(_x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 51_097 nanoseconds.
		Weight::from_ref_time(45_456_651 as u64)
			// Standard Error: 1_564
			.saturating_add(Weight::from_ref_time(91_479 as u64).saturating_mul(y as u64))
			// Standard Error: 1_397
			.saturating_add(Weight::from_ref_time(187_151 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion Prime (r:1 w:0)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, _x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 48_878 nanoseconds.
		Weight::from_ref_time(42_770_702 as u64)
			// Standard Error: 141
			.saturating_add(Weight::from_ref_time(382 as u64).saturating_mul(b as u64))
			// Standard Error: 1_631
			.saturating_add(Weight::from_ref_time(95_162 as u64).saturating_mul(y as u64))
			// Standard Error: 1_457
			.saturating_add(Weight::from_ref_time(200_711 as u64).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:3 w:3)
	// Storage: AllianceMotion Members (r:1 w:1)
	/// The range of component `x` is `[1, 10]`.
	/// The range of component `y` is `[0, 90]`.
	/// The range of component `z` is `[0, 100]`.
	fn init_members(_x: u32, y: u32, z: u32, ) -> Weight {
		// Minimum execution time: 45_783 nanoseconds.
		Weight::from_ref_time(37_535_221 as u64)
			// Standard Error: 2_068
			.saturating_add(Weight::from_ref_time(153_261 as u64).saturating_mul(y as u64))
			// Standard Error: 1_865
			.saturating_add(Weight::from_ref_time(121_452 as u64).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:3 w:3)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: Alliance DepositOf (r:101 w:50)
	// Storage: System Account (r:50 w:50)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	/// The range of component `x` is `[1, 100]`.
	/// The range of component `y` is `[0, 100]`.
	/// The range of component `z` is `[0, 50]`.
	fn disband(x: u32, y: u32, z: u32, ) -> Weight {
		// Minimum execution time: 251_231 nanoseconds.
		Weight::from_ref_time(252_248_000 as u64)
			// Standard Error: 19_229
			.saturating_add(Weight::from_ref_time(432_384 as u64).saturating_mul(x as u64))
			// Standard Error: 19_137
			.saturating_add(Weight::from_ref_time(510_931 as u64).saturating_mul(y as u64))
			// Standard Error: 38_239
			.saturating_add(Weight::from_ref_time(8_782_962 as u64).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(y as u64)))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(z as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(z as u64)))
	}
	// Storage: Alliance Rule (r:0 w:1)
	fn set_rule() -> Weight {
		// Minimum execution time: 18_639 nanoseconds.
		Weight::from_ref_time(18_834_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Announcements (r:1 w:1)
	fn announce() -> Weight {
		// Minimum execution time: 21_402 nanoseconds.
		Weight::from_ref_time(21_898_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Announcements (r:1 w:1)
	fn remove_announcement() -> Weight {
		// Minimum execution time: 22_857 nanoseconds.
		Weight::from_ref_time(23_122_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Members (r:4 w:1)
	// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Alliance DepositOf (r:0 w:1)
	fn join_alliance() -> Weight {
		// Minimum execution time: 54_584 nanoseconds.
		Weight::from_ref_time(55_326_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:4 w:1)
	// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	fn nominate_ally() -> Weight {
		// Minimum execution time: 42_607 nanoseconds.
		Weight::from_ref_time(43_045_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Members (r:3 w:2)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	fn elevate_ally() -> Weight {
		// Minimum execution time: 37_869 nanoseconds.
		Weight::from_ref_time(38_371_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:4 w:2)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	// Storage: Alliance RetiringMembers (r:0 w:1)
	fn give_retirement_notice() -> Weight {
		// Minimum execution time: 40_937 nanoseconds.
		Weight::from_ref_time(41_424_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Alliance RetiringMembers (r:1 w:1)
	// Storage: Alliance Members (r:1 w:1)
	// Storage: Alliance DepositOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn retire() -> Weight {
		// Minimum execution time: 43_841 nanoseconds.
		Weight::from_ref_time(44_246_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:3 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: Alliance DepositOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	fn kick_member() -> Weight {
		// Minimum execution time: 62_162 nanoseconds.
		Weight::from_ref_time(62_844_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn add_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Minimum execution time: 16_786 nanoseconds.
		Weight::from_ref_time(17_011_000 as u64)
			// Standard Error: 2_682
			.saturating_add(Weight::from_ref_time(1_277_333 as u64).saturating_mul(n as u64))
			// Standard Error: 1_050
			.saturating_add(Weight::from_ref_time(71_380 as u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn remove_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Minimum execution time: 16_825 nanoseconds.
		Weight::from_ref_time(16_941_000 as u64)
			// Standard Error: 162_630
			.saturating_add(Weight::from_ref_time(12_708_268 as u64).saturating_mul(n as u64))
			// Standard Error: 63_693
			.saturating_add(Weight::from_ref_time(487_623 as u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion ProposalOf (r:1 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalCount (r:1 w:1)
	// Storage: AllianceMotion Voting (r:0 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[0, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, _x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 42_010 nanoseconds.
		Weight::from_ref_time(38_648_480 as u64)
			// Standard Error: 160
			.saturating_add(Weight::from_ref_time(629 as u64).saturating_mul(b as u64))
			// Standard Error: 1_814
			.saturating_add(Weight::from_ref_time(68_458 as u64).saturating_mul(y as u64))
			// Standard Error: 1_656
			.saturating_add(Weight::from_ref_time(205_685 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:2 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	/// The range of component `x` is `[3, 10]`.
	/// The range of component `y` is `[2, 90]`.
	fn vote(x: u32, y: u32, ) -> Weight {
		// Minimum execution time: 45_759 nanoseconds.
		Weight::from_ref_time(47_395_925 as u64)
			// Standard Error: 28_585
			.saturating_add(Weight::from_ref_time(115_114 as u64).saturating_mul(x as u64))
			// Standard Error: 2_419
			.saturating_add(Weight::from_ref_time(124_366 as u64).saturating_mul(y as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion ProposalOf (r:1 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion Voting (r:0 w:1)
	/// The range of component `p` is `[1, 100]`.
	fn veto(p: u32, ) -> Weight {
		// Minimum execution time: 32_932 nanoseconds.
		Weight::from_ref_time(36_575_953 as u64)
			// Standard Error: 1_694
			.saturating_add(Weight::from_ref_time(171_044 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 49_557 nanoseconds.
		Weight::from_ref_time(39_153_825 as u64)
			// Standard Error: 17_921
			.saturating_add(Weight::from_ref_time(231_354 as u64).saturating_mul(x as u64))
			// Standard Error: 1_746
			.saturating_add(Weight::from_ref_time(102_638 as u64).saturating_mul(y as u64))
			// Standard Error: 1_559
			.saturating_add(Weight::from_ref_time(186_229 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion ProposalOf (r:1 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 59_692 nanoseconds.
		Weight::from_ref_time(50_050_088 as u64)
			// Standard Error: 134
			.saturating_add(Weight::from_ref_time(1_827 as u64).saturating_mul(b as u64))
			// Standard Error: 15_862
			.saturating_add(Weight::from_ref_time(37_921 as u64).saturating_mul(x as u64))
			// Standard Error: 1_548
			.saturating_add(Weight::from_ref_time(94_269 as u64).saturating_mul(y as u64))
			// Standard Error: 1_382
			.saturating_add(Weight::from_ref_time(212_481 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion Prime (r:1 w:0)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(_x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 51_097 nanoseconds.
		Weight::from_ref_time(45_456_651 as u64)
			// Standard Error: 1_564
			.saturating_add(Weight::from_ref_time(91_479 as u64).saturating_mul(y as u64))
			// Standard Error: 1_397
			.saturating_add(Weight::from_ref_time(187_151 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:1 w:0)
	// Storage: AllianceMotion Voting (r:1 w:1)
	// Storage: AllianceMotion Members (r:1 w:0)
	// Storage: AllianceMotion Prime (r:1 w:0)
	// Storage: AllianceMotion Proposals (r:1 w:1)
	// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `x` is `[2, 10]`.
	/// The range of component `y` is `[2, 90]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, _x: u32, y: u32, p: u32, ) -> Weight {
		// Minimum execution time: 48_878 nanoseconds.
		Weight::from_ref_time(42_770_702 as u64)
			// Standard Error: 141
			.saturating_add(Weight::from_ref_time(382 as u64).saturating_mul(b as u64))
			// Standard Error: 1_631
			.saturating_add(Weight::from_ref_time(95_162 as u64).saturating_mul(y as u64))
			// Standard Error: 1_457
			.saturating_add(Weight::from_ref_time(200_711 as u64).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:3 w:3)
	// Storage: AllianceMotion Members (r:1 w:1)
	/// The range of component `x` is `[1, 10]`.
	/// The range of component `y` is `[0, 90]`.
	/// The range of component `z` is `[0, 100]`.
	fn init_members(_x: u32, y: u32, z: u32, ) -> Weight {
		// Minimum execution time: 45_783 nanoseconds.
		Weight::from_ref_time(37_535_221 as u64)
			// Standard Error: 2_068
			.saturating_add(Weight::from_ref_time(153_261 as u64).saturating_mul(y as u64))
			// Standard Error: 1_865
			.saturating_add(Weight::from_ref_time(121_452 as u64).saturating_mul(z as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:3 w:3)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: Alliance DepositOf (r:101 w:50)
	// Storage: System Account (r:50 w:50)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	/// The range of component `x` is `[1, 100]`.
	/// The range of component `y` is `[0, 100]`.
	/// The range of component `z` is `[0, 50]`.
	fn disband(x: u32, y: u32, z: u32, ) -> Weight {
		// Minimum execution time: 251_231 nanoseconds.
		Weight::from_ref_time(252_248_000 as u64)
			// Standard Error: 19_229
			.saturating_add(Weight::from_ref_time(432_384 as u64).saturating_mul(x as u64))
			// Standard Error: 19_137
			.saturating_add(Weight::from_ref_time(510_931 as u64).saturating_mul(y as u64))
			// Standard Error: 38_239
			.saturating_add(Weight::from_ref_time(8_782_962 as u64).saturating_mul(z as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(y as u64)))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(z as u64)))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
			.saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(z as u64)))
	}
	// Storage: Alliance Rule (r:0 w:1)
	fn set_rule() -> Weight {
		// Minimum execution time: 18_639 nanoseconds.
		Weight::from_ref_time(18_834_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Announcements (r:1 w:1)
	fn announce() -> Weight {
		// Minimum execution time: 21_402 nanoseconds.
		Weight::from_ref_time(21_898_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Announcements (r:1 w:1)
	fn remove_announcement() -> Weight {
		// Minimum execution time: 22_857 nanoseconds.
		Weight::from_ref_time(23_122_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Members (r:4 w:1)
	// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Alliance DepositOf (r:0 w:1)
	fn join_alliance() -> Weight {
		// Minimum execution time: 54_584 nanoseconds.
		Weight::from_ref_time(55_326_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Alliance Members (r:4 w:1)
	// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	fn nominate_ally() -> Weight {
		// Minimum execution time: 42_607 nanoseconds.
		Weight::from_ref_time(43_045_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Alliance Members (r:3 w:2)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	fn elevate_ally() -> Weight {
		// Minimum execution time: 37_869 nanoseconds.
		Weight::from_ref_time(38_371_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:4 w:2)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	// Storage: Alliance RetiringMembers (r:0 w:1)
	fn give_retirement_notice() -> Weight {
		// Minimum execution time: 40_937 nanoseconds.
		Weight::from_ref_time(41_424_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Alliance RetiringMembers (r:1 w:1)
	// Storage: Alliance Members (r:1 w:1)
	// Storage: Alliance DepositOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn retire() -> Weight {
		// Minimum execution time: 43_841 nanoseconds.
		Weight::from_ref_time(44_246_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Alliance Members (r:3 w:1)
	// Storage: AllianceMotion Proposals (r:1 w:0)
	// Storage: Alliance DepositOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: AllianceMotion Members (r:0 w:1)
	// Storage: AllianceMotion Prime (r:0 w:1)
	fn kick_member() -> Weight {
		// Minimum execution time: 62_162 nanoseconds.
		Weight::from_ref_time(62_844_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn add_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Minimum execution time: 16_786 nanoseconds.
		Weight::from_ref_time(17_011_000 as u64)
			// Standard Error: 2_682
			.saturating_add(Weight::from_ref_time(1_277_333 as u64).saturating_mul(n as u64))
			// Standard Error: 1_050
			.saturating_add(Weight::from_ref_time(71_380 as u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn remove_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Minimum execution time: 16_825 nanoseconds.
		Weight::from_ref_time(16_941_000 as u64)
			// Standard Error: 162_630
			.saturating_add(Weight::from_ref_time(12_708_268 as u64).saturating_mul(n as u64))
			// Standard Error: 63_693
			.saturating_add(Weight::from_ref_time(487_623 as u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
